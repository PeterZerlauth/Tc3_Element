<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Element" Id="{3beb4649-c557-0131-2fab-e053b34b5bbf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Element IMPLEMENTS I_Element
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbReflection:					FB_Reflection;				// Info about function block
	fbEvent:						FB_Event(THIS^);			// Event Publisher
	fbSequence:						FB_Sequence(THIS^);			// Sequence
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '2'}
	eState:							E_State;					// Current state
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	eStateRequest:					E_State;					// State command
    {attribute 'hide'}
	eStatePrevious:					E_State;					// Previous state
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbReflection();
fbEvent();
fbSequence();

// State machine logic
CASE eState OF

    // Idle state:
    E_State.Idle:
        IF M_Idle() THEN
            eState := E_State.Starting;
        END_IF
		
		CASE eStateRequest OF
			E_State.Starting, E_State.Execute:
            	eState := E_State.Starting;				
			
		END_CASE

    // Starting state:
    E_State.Starting:
        IF M_Starting() THEN
            eState := E_State.Execute;
        END_IF

    // Execute state:
    E_State.Execute:
        IF M_Execute() THEN
            eState := E_State.Stopping;
        END_IF
		
		CASE eStateRequest OF
			E_State.Stopping, E_State.Stopped:
            	eState := E_State.Stopping;

			E_State.Aborting, E_State.Aborted:
            	eState := E_State.Aborting;				
			
		END_CASE

    // Stopping state:
    E_State.Stopping:
        IF M_Stopping() THEN
            eState := E_State.Stopped;
        END_IF

    // Stopped state:
    E_State.Stopped:
        IF M_Stopped() THEN
            eState := E_State.Resetting;
        END_IF
		
		CASE eStateRequest OF
			E_State.Resetting, E_State.Idle:
            eState := E_State.Resetting;			
			
		END_CASE
		
    // Aborting state:
    E_State.Aborting:
        IF M_Aborting() THEN
            eState := E_State.Aborted;
        END_IF

    // Aborted state:
    E_State.Aborted:
        IF M_Aborted() THEN
            eState := E_State.Resetting;
        END_IF
		
		CASE eStateRequest OF
			E_State.Resetting, E_State.Idle:
            eState := E_State.Resetting;			
			
		END_CASE

    // Resetting state:
    E_State.Resetting:
        IF M_Resetting() THEN
            eState := E_State.Idle;
        END_IF

END_CASE
eStateRequest := eState;

// Detect state transitions and trigger event callback
IF eStatePrevious <> eState THEN
    M_OnState(eState, eStatePrevious);
    eStatePrevious := eState;
END_IF]]></ST>
    </Implementation>
    <Folder Name="State" Id="{ca15ba5f-c875-08b1-19c6-3566ddf8fed6}" />
    <Method Name="M_Aborted" Id="{f47ae709-6b97-0869-103e-462a949d9bd1}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Aborted : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Aborted:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Aborting" Id="{5420cd8c-8440-0133-17b0-cfc9fa3a226e}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Aborting : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Aborting:= TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Completed" Id="{a7223eeb-937e-0932-34bf-74539565cf99}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Completed : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Completed:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Completing" Id="{25962ce0-1492-0d73-2226-fd61bbb69809}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Completing : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Completing:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{0a26e879-26ba-0448-077b-265f6eb411a3}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Execute : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Execute:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Idle" Id="{f81e94c9-4b34-0591-0431-3c8c41c7dc3f}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Idle : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Idle:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OnState" Id="{49afef72-99ac-0c9e-2ec3-7701e0509cd3}">
      <Declaration><![CDATA[METHOD Protected M_OnState
VAR_INPUT
	eState:							E_State;						// Current state
	eStatePrevious:					E_State;						// Previous state	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State changed event
fbSequence.M_Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Request" Id="{bdd740c0-4464-0c1b-399c-16ea1aed66b8}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD PUBLIC M_Request : BOOL
VAR_INPUT
	eRequest:	E_Request;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Request element states
CASE eRequest OF
	E_Request.Reset:
		eStateRequest:= E_State.Resetting;
		CASE eState OF 
			E_State.Execute, E_State.Idle:
				M_Request:= TRUE;
		END_CASE			
		
	E_Request.Start:
		eStateRequest:= E_State.Execute;
		CASE eState OF 
			E_State.Execute:
				M_Request:= TRUE;
		END_CASE
		
	E_Request.Stop:
		eStateRequest:= E_State.Stopped;
		CASE eState OF 
			E_State.Stopped, E_State.Aborted, E_State.Idle:
				M_Request:= TRUE;
		END_CASE
	
	E_Request.Abort:
		eStateRequest:= E_State.Aborted;
		CASE eState OF 
			E_State.Aborted:
				M_Request:= TRUE;
		END_CASE	
	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{9e5fa12d-dc9f-0271-3ab1-62fbd4e3c4cb}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Resetting : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Resetting:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{7b4cc2a9-4be8-0ad5-3afd-3314d7249ec2}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Starting : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Starting:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopped" Id="{415168e7-f2ee-0214-0037-987f9ecb70ed}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopped : BOOL // Return
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Stopped:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{752f6f5c-84eb-0065-086e-87701d5b75a9}" FolderPath="State\">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopping : BOOL // Return state complete
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Stopping:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Event" Id="{4af7c41c-ce75-074c-247b-1e9cde87d3d0}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Event : I_Event
]]></Declaration>
      <Get Name="Get" Id="{581dbbf1-1871-0bc4-2167-11bb575e35b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Event:= fbEvent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Reflection" Id="{1f2686a8-22c2-03c1-3b18-3cdd0f1b6158}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Reflection : I_Reflection]]></Declaration>
      <Get Name="Get" Id="{80d9a233-1863-0529-037a-9eeb24a670c8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Reflection:= fbReflection;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Sequence" Id="{cbc13e31-79ab-065b-2937-0c8e094270ad}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Sequence : I_Sequence
]]></Declaration>
      <Get Name="Get" Id="{dc33c7a0-5128-0126-1cd1-354ef18b5411}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Sequence:= fbSequence;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_State" Id="{b623cabe-ac07-05b3-3398-a07000fa3104}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_State : E_State]]></Declaration>
      <Get Name="Get" Id="{f9b2e5f6-eb20-00e6-39d5-99b5e96a63c5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_State:= eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>